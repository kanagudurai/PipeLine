# Xcode
# Build, test, and archive an Xcode workspace on macOS.
# Add steps that install certificates, test, sign, and distribute an app, save build artifacts, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/xcode

trigger:
- master

pool:
  vmImage: 'macos-latest'

steps:
########################################
# Build App and test it locally        #
######################################## 
- task: CmdLine@2
  displayName: 'Run swiftlint on pipeline terminal'
  inputs:
    script: './Pods/SwiftLint/swiftlint --config ./.swiftlint.yml --reporter junit'
- task: Xcode@5
  inputs:
    actions: 'clean build'
    exportPath: '$(agent.buildDirectory)/output/$(sdk)/$(configuration)'
    xcodeVersion: 'default' # Options: default, 10, 9, 8, specifyPath
    sdk: 'iphonesimulator'
    configuration: 'Debug'
    scheme: 'iOSHelloWorld'
    destinationPlatformOption: 'iOS'
    destinationSimulators: 'iPhone 8'
    publishJUnitResults: true

###############################################
# Run automated UI Tests on physical devices  #
###############################################    
- task: Xcode@5
  inputs:
    actions: 'test'
    configuration: 'Debug'
    sdk: 'iphonesimulator'
    destinationPlatformOption: 'iOS'
    destinationSimulators: 'iPhone 8'
    scheme: 'iOSHelloWorld'
    packageApp: false
    publishJUnitResults: true
    testRunTitle: 'Testing App'
    useXcpretty: true
    args: '-derivedDataPath $(build.artifactStagingDirectory)/DerivedData'
    
- task: PublishCodeCoverageResults@1
  displayName: 'Publish code coverage report'
  inputs:
    codeCoverageTool: 'cobertura'
    summaryFileLocation: '$(Agent.TempDirectory)/**/coverage.cobertura.xml'
  

# - task: SonarQubePrepare@4
#   inputs:
#     SonarQube: iOSHelloWorld
#     scannerMode: 'CLI'
#     configMode: 'manual'
#     cliProjectKey: 'iOSHelloWorld'
#     cliProjectName: 'iOSHelloWorld'
#     # configFile: 'sonar-project.properties'
#     cliSources: '.'
#     extraProperties: |
#                 sonar.language=swift
#                 sonar.sources=src
#                 sonar.swift.simulator=platform=iOS Simulator,name=iPhone 8,OS=14.5
#                 sonar.swift.project=iOSHelloWorld.xcodeproj
#                 sonar.swift.appScheme=iOSHelloWorld
#                 sonar.exclusions= sonar-scanner-cli/conf/sonar-scanner.properties
#                 sonar.junit.reportsPath=sonar-reports/TEST-report.xml
              
#                 sonar.projectVersion=1.0
#                 sonar.test.inclusions=**/*Test*/**
#                 sonar.test.inclusions=*.swift
#                   #sonar.swift.coverage.reportPath=sonar-reports/coverage-swift.xml
#                 sonar.swift.coverage.reportPaths = $(Build.Repository.LocalPath)/sonarqube-generic-coverage.xml
                 
#                  sonar.sourceEncoding=UTF-8
#                  sonar.junit.reportsPath=sonar-reports/TEST-report.xml
                 
#                  sonar.swift.swiftlint.report=sonar-reports/*swiftlint.txt
#                  sonar.swift.tailor.report=sonar-reports/*tailor.txt
#                  sonar.c.file.suffixes=-
#                  sonar.cpp.file.suffixes=-
#                  sonar.objc.file.suffixes=-

#   env:
#     NO_PROXY: $(https://sq.corp.hpicloud.net/)


# - task: SonarQubeAnalyze@4
#   continueOnError: true

# - task: SonarQubePublish@4
  #inputs:
  #   pollingTimeoutSec: '300'

  env:
    NO_PROXY: $(https://sq.corp.hpicloud.net/)     

# - task: Xcode@5
#   inputs:
#     actions: 'build'
#     sdk: 'iphonesimulator'
#     configuration: 'Release'
#     scheme: 'iOSHelloWorld'
#     packageApp: true
#     exportPath: '$(build.artifactStagingDirectory)/release'
#     signingOption: 'manual'
#     signingIdentity: '$(APPLE_CERTIFICATE_SIGNING_IDENTITY)'
#     provisioningProfileUuid: '$(APPLE_PROV_PROFILE_UUID)'
#     destinationPlatformOption: 'iOS'
#     destinationSimulators: 'iPhone 11'

# - task: AppCenterTest@1
#   inputs:
#     appFile: '$(Build.ArtifactStagingDirectory)/release/TestApp-iOS.ipa'
#     artifactsDirectory: '$(Build.ArtifactStagingDirectory)/AppCenterTest'
#     frameworkOption: 'xcuitest'
#     xcUITestBuildDirectory: '$(build.artifactStagingDirectory)/DerivedData/Build/Products/Debug-iphoneos'
#     credentialsOption: 'serviceEndpoint'
#     serverEndpoint: 'MyCompany AppCenter Deployment'
#     appSlug: 'MyCompany/Moments-iOS'
#     devices: 'MyCompany/iphone11'
#     localeOption: 'en_US'
#     skipWaitingForResults: true
#     showDebugOutput: true
